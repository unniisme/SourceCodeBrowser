[
 {
  "docstring": "call one function and check if global RNG changed",
  "code": "def t(f, *args, **kwds):\n    global progress\n    progress += 1\n    print(progress, ',', end='')\n    f(*args, **kwds)\n    after_np_rv = np.random.rand()\n    assert np_rv == after_np_rv\n    np.random.seed(42)\n    after_py_rv = random.random()\n    assert py_rv == after_py_rv\n    random.seed(42)"
 },
 {
  "docstring": "Multi edge data overwritten when edge_data != None",
  "code": "def test_to_dict_of_dicts_with_edgedata_multigraph():\n    G = nx.MultiGraph()\n    G.add_edge(0, 1, key='a')\n    G.add_edge(0, 1, key='b')\n    expected = {0: {1: 10}, 1: {0: 10}}\n    assert nx.to_dict_of_dicts(G, edge_data=10) == expected"
 },
 {
  "docstring": "Test various functions for reducing multiedge weights.",
  "code": "@pytest.mark.parametrize('func, expected', ((min, -1), (max, 10), (sum, 11), (np.mean, 11 / 3), (np.median, 2)))\ndef test_to_numpy_array_multiweight_reduction(func, expected):\n    G = nx.MultiDiGraph()\n    weights = [-1, 2, 10.0]\n    for w in weights:\n        G.add_edge(0, 1, weight=w)\n    A = nx.to_numpy_array(G, multigraph_weight=func, dtype=float)\n    assert np.allclose(A, [[0, expected], [0, 0]])\n    A = nx.to_numpy_array(G.to_undirected(), multigraph_weight=func, dtype=float)\n    assert np.allclose(A, [[0, expected], [expected, 0]])"
 },
 {
  "docstring": "When `dtype` is structured (i.e. has names) and `weight` is None, use\nthe named fields of the dtype to look up edge attributes.",
  "code": "@pytest.mark.parametrize('G, expected', [(nx.Graph(), [[(0, 0), (10, 5)], [(10, 5), (0, 0)]]), (nx.DiGraph(), [[(0, 0), (10, 5)], [(0, 0), (0, 0)]])])\ndef test_to_numpy_array_structured_dtype_attrs_from_fields(G, expected):\n    G.add_edge(0, 1, weight=10, cost=5.0)\n    dtype = np.dtype([('weight', int), ('cost', int)])\n    A = nx.to_numpy_array(G, dtype=dtype, weight=None)\n    expected = np.asarray(expected, dtype=dtype)\n    npt.assert_array_equal(A, expected)"
 },
 {
  "docstring": "Similar to the scalar case, except has a different non-edge value for\neach named field.",
  "code": "@pytest.mark.parametrize('G', (nx.Graph(), nx.DiGraph()))\ndef test_to_numpy_array_structured_dtype_nonedge_ary(G):\n    G.add_edge(0, 1, weight=10)\n    dtype = np.dtype([('weight', float), ('cost', float)])\n    nonedges = np.array([(0, np.inf)], dtype=dtype)\n    A = nx.to_numpy_array(G, dtype=dtype, weight=None, nonedge=nonedges)\n    for attr in dtype.names:\n        nonedge = nonedges[attr]\n        expected = nx.to_numpy_array(G, dtype=float, weight=attr, nonedge=nonedge)\n        npt.assert_array_equal(A[attr], expected)"
 },
 {
  "docstring": "Using both a structured dtype (with named fields) and specifying a `weight`\nparameter is ambiguous.",
  "code": "def test_to_numpy_array_structured_dtype_with_weight_raises():\n    G = nx.path_graph(3)\n    dtype = np.dtype([('weight', int), ('cost', int)])\n    exception_msg = 'Specifying `weight` not supported for structured dtypes'\n    with pytest.raises(ValueError, match=exception_msg):\n        nx.to_numpy_array(G, dtype=dtype)\n    with pytest.raises(ValueError, match=exception_msg):\n        nx.to_numpy_array(G, dtype=dtype, weight='cost')"
 },
 {
  "docstring": "Conversion from non-square array.",
  "code": "def test_shape(self):\n    A = np.array([[1, 2, 3], [4, 5, 6]])\n    pytest.raises(nx.NetworkXError, nx.from_numpy_array, A)"
 },
 {
  "docstring": "Conversion from graph to array to graph.",
  "code": "def test_identity_graph_array(self):\n    A = nx.to_numpy_array(self.G1)\n    self.identity_conversion(self.G1, A, nx.Graph())"
 },
 {
  "docstring": "Conversion from digraph to array to digraph.",
  "code": "def test_identity_digraph_array(self):\n    A = nx.to_numpy_array(self.G2)\n    self.identity_conversion(self.G2, A, nx.DiGraph())"
 },
 {
  "docstring": "Conversion from weighted graph to array to weighted graph.",
  "code": "def test_identity_weighted_graph_array(self):\n    A = nx.to_numpy_array(self.G3)\n    self.identity_conversion(self.G3, A, nx.Graph())"
 },
 {
  "docstring": "Conversion from weighted digraph to array to weighted digraph.",
  "code": "def test_identity_weighted_digraph_array(self):\n    A = nx.to_numpy_array(self.G4)\n    self.identity_conversion(self.G4, A, nx.DiGraph())"
 },
 {
  "docstring": "Conversion from graph to array to graph with nodelist.",
  "code": "def test_nodelist(self):\n    P4 = path_graph(4)\n    P3 = path_graph(3)\n    nodelist = list(P3)\n    A = nx.to_numpy_array(P4, nodelist=nodelist)\n    GA = nx.Graph(A)\n    self.assert_equal(GA, P3)\n    nodelist += [nodelist[0]]\n    pytest.raises(nx.NetworkXError, nx.to_numpy_array, P3, nodelist=nodelist)\n    nodelist = [-1, 0, 1]\n    with pytest.raises(nx.NetworkXError, match=f'Nodes {nodelist - P3.nodes} in nodelist is not in G'):\n        nx.to_numpy_array(P3, nodelist=nodelist)"
 },
 {
  "docstring": "Tests that the :func:`networkx.from_numpy_array` function\ninterprets integer weights as the number of parallel edges when\ncreating a multigraph.",
  "code": "def test_from_numpy_array_parallel_edges(self):\n    A = np.array([[1, 1], [1, 2]])\n    expected = nx.DiGraph()\n    edges = [(0, 0), (0, 1), (1, 0)]\n    expected.add_weighted_edges_from([(u, v, 1) for u, v in edges])\n    expected.add_edge(1, 1, weight=2)\n    actual = nx.from_numpy_array(A, parallel_edges=True, create_using=nx.DiGraph)\n    assert graphs_equal(actual, expected)\n    actual = nx.from_numpy_array(A, parallel_edges=False, create_using=nx.DiGraph)\n    assert graphs_equal(actual, expected)\n    edges = [(0, 0), (0, 1), (1, 0), (1, 1), (1, 1)]\n    expected = nx.MultiDiGraph()\n    expected.add_weighted_edges_from([(u, v, 1) for u, v in edges])\n    actual = nx.from_numpy_array(A, parallel_edges=True, create_using=nx.MultiDiGraph)\n    assert graphs_equal(actual, expected)\n    expected = nx.MultiDiGraph()\n    expected.add_edges_from(set(edges), weight=1)\n    expected[1][1][0]['weight'] = 2\n    actual = nx.from_numpy_array(A, parallel_edges=False, create_using=nx.MultiDiGraph)\n    assert graphs_equal(actual, expected)"
 },
 {
  "docstring": "Tests that a symmetric array has edges added only once to an\nundirected multigraph when using :func:`networkx.from_numpy_array`.",
  "code": "def test_symmetric(self):\n    A = np.array([[0, 1], [1, 0]])\n    G = nx.from_numpy_array(A, create_using=nx.MultiGraph)\n    expected = nx.MultiGraph()\n    expected.add_edge(0, 1, weight=1)\n    assert graphs_equal(G, expected)"
 },
 {
  "docstring": "Test that setting dtype int actually gives an integer array.\n\nFor more information, see GitHub pull request #1363.",
  "code": "def test_dtype_int_graph(self):\n    G = nx.complete_graph(3)\n    A = nx.to_numpy_array(G, dtype=int)\n    assert A.dtype == int"
 },
 {
  "docstring": "Test that setting dtype int actually gives an integer array.\n\nFor more information, see GitHub pull request #1363.",
  "code": "def test_dtype_int_multigraph(self):\n    G = nx.MultiGraph(nx.complete_graph(3))\n    A = nx.to_numpy_array(G, dtype=int)\n    assert A.dtype == int"
 },
 {
  "docstring": "Test all formats supported by _generate_weighted_edges.",
  "code": "@pytest.mark.parametrize('sparse_format', ('csr', 'csc', 'dok'))\ndef test_from_scipy_sparse_array_formats(sparse_format):\n    expected = nx.Graph()\n    expected.add_edges_from([(0, 1, {'weight': 3}), (0, 2, {'weight': 2}), (1, 0, {'weight': 3}), (1, 2, {'weight': 1}), (2, 0, {'weight': 2}), (2, 1, {'weight': 1})])\n    A = sp.sparse.coo_array([[0, 3, 2], [3, 0, 1], [2, 1, 0]]).asformat(sparse_format)\n    assert graphs_equal(expected, nx.from_scipy_sparse_array(A))"
 },
 {
  "docstring": "Conversion from non-square sparse array.",
  "code": "def test_shape(self):\n    A = sp.sparse.lil_array([[1, 2, 3], [4, 5, 6]])\n    pytest.raises(nx.NetworkXError, nx.from_scipy_sparse_array, A)"
 },
 {
  "docstring": "Conversion from graph to sparse matrix to graph.",
  "code": "def test_identity_graph_matrix(self):\n    A = nx.to_scipy_sparse_array(self.G1)\n    self.identity_conversion(self.G1, A, nx.Graph())"
 },
 {
  "docstring": "Conversion from digraph to sparse matrix to digraph.",
  "code": "def test_identity_digraph_matrix(self):\n    A = nx.to_scipy_sparse_array(self.G2)\n    self.identity_conversion(self.G2, A, nx.DiGraph())"
 },
 {
  "docstring": "Conversion from weighted graph to sparse matrix to weighted graph.",
  "code": "def test_identity_weighted_graph_matrix(self):\n    A = nx.to_scipy_sparse_array(self.G3)\n    self.identity_conversion(self.G3, A, nx.Graph())"
 },
 {
  "docstring": "Conversion from weighted digraph to sparse matrix to weighted digraph.",
  "code": "def test_identity_weighted_digraph_matrix(self):\n    A = nx.to_scipy_sparse_array(self.G4)\n    self.identity_conversion(self.G4, A, nx.DiGraph())"
 },
 {
  "docstring": "Conversion from graph to sparse matrix to graph with nodelist.",
  "code": "def test_nodelist(self):\n    P4 = path_graph(4)\n    P3 = path_graph(3)\n    nodelist = list(P3.nodes())\n    A = nx.to_scipy_sparse_array(P4, nodelist=nodelist)\n    GA = nx.Graph(A)\n    assert nx.is_isomorphic(GA, P3)\n    pytest.raises(nx.NetworkXError, nx.to_scipy_sparse_array, P3, nodelist=[])\n    long_nl = nodelist + [0]\n    pytest.raises(nx.NetworkXError, nx.to_scipy_sparse_array, P3, nodelist=long_nl)\n    non_nl = [-1, 0, 1, 2]\n    pytest.raises(nx.NetworkXError, nx.to_scipy_sparse_array, P3, nodelist=non_nl)"
 },
 {
  "docstring": "Tests that the :func:`networkx.from_scipy_sparse_array` function\ninterprets integer weights as the number of parallel edges when\ncreating a multigraph.",
  "code": "def test_from_scipy_sparse_array_parallel_edges(self):\n    A = sp.sparse.csr_array([[1, 1], [1, 2]])\n    expected = nx.DiGraph()\n    edges = [(0, 0), (0, 1), (1, 0)]\n    expected.add_weighted_edges_from([(u, v, 1) for u, v in edges])\n    expected.add_edge(1, 1, weight=2)\n    actual = nx.from_scipy_sparse_array(A, parallel_edges=True, create_using=nx.DiGraph)\n    assert graphs_equal(actual, expected)\n    actual = nx.from_scipy_sparse_array(A, parallel_edges=False, create_using=nx.DiGraph)\n    assert graphs_equal(actual, expected)\n    edges = [(0, 0), (0, 1), (1, 0), (1, 1), (1, 1)]\n    expected = nx.MultiDiGraph()\n    expected.add_weighted_edges_from([(u, v, 1) for u, v in edges])\n    actual = nx.from_scipy_sparse_array(A, parallel_edges=True, create_using=nx.MultiDiGraph)\n    assert graphs_equal(actual, expected)\n    expected = nx.MultiDiGraph()\n    expected.add_edges_from(set(edges), weight=1)\n    expected[1][1][0]['weight'] = 2\n    actual = nx.from_scipy_sparse_array(A, parallel_edges=False, create_using=nx.MultiDiGraph)\n    assert graphs_equal(actual, expected)"
 },
 {
  "docstring": "Tests that a symmetric matrix has edges added only once to an\nundirected multigraph when using\n:func:`networkx.from_scipy_sparse_array`.",
  "code": "def test_symmetric(self):\n    A = sp.sparse.csr_array([[0, 1], [1, 0]])\n    G = nx.from_scipy_sparse_array(A, create_using=nx.MultiGraph)\n    expected = nx.MultiGraph()\n    expected.add_edge(0, 1, weight=1)\n    assert graphs_equal(G, expected)"
 },
 {
  "docstring": "If `mapping` is neither a Callable or a Mapping, an exception\nshould be raised.",
  "code": "@pytest.mark.parametrize('non_mc', ('0123', ['0', '1', '2', '3']))\ndef test_relabel_nodes_non_mapping_or_callable(self, non_mc):\n    G = nx.path_graph(4)\n    with pytest.raises(AttributeError):\n        nx.relabel_nodes(G, non_mc)"
 }
]